from scipy.spatial.transform import Rotation
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

### ABC
### DEF

# ab = cb horizontal flip
# cd = fd horizontal flip

goal_a  = [1.0, -1.0]
goal_b  = [3.0, -1.0] 
goal_c  = [5.0, -1.0]

goal_d  = [1.0, -3.0]
goal_e  = [3.0, -3.0]
goal_f  = [5.0, -3.0]

state_dict = {}
state_dict['A'] = goal_a
state_dict['B'] = goal_b
state_dict['C'] = goal_c
state_dict['D'] = goal_d
state_dict['E'] = goal_e
state_dict['F'] = goal_f

goal_list 	= [goal_a, goal_b, goal_c, goal_d, goal_e, goal_f]
goal_colors = ['red', 'blue', 'purple', 'green', 'orange', 'pink']

# GENERATED PATHS
export_name = 'toptwo' #'null' #'toptwo'

inspection_save_path = "study_paths/"

def inspect_path_set():

	print("\nEarly dict")
	early_dict 	= setup_path_dict('early')
	print("\nLate dict")
	late_dict 	= setup_path_dict('late')
	print("\nEven dict")
	even_dict	= setup_path_dict('even')

	print("Obstacle path")
	obstacle_dict = setup_path_dict('obs')

	export_path_dict('early', early_dict)
	export_path_dict('late', late_dict)
	export_path_dict('even', even_dict)
	export_path_dict('obs', obstacle_dict)

	##### Calculate the path lengths, also
	count_path_lengths(inspection_save_path, early_dict, late_dict, even_dict, obstacle_dict)

	##### draw them in groups by the path segment
	draw_paths_by_segment(inspection_save_path, early_dict, late_dict, even_dict)

	##### draw them in groups by the early/late/etc/group
	draw_paths_by_dict(inspection_save_path, early_dict, late_dict, even_dict, obstacle_dict)

	##### special drawings for obstacle avoidance
	draw_obstacle_sets(inspection_save_path, early_dict, late_dict, even_dict, obstacle_dict)

def get_xy_from_path(path):
	if len(path) == 0:
		return [], []

	x_list, y_list = list(map(list, zip(*path)))

	return x_list, y_list

def draw_paths_by_segment(inspection_save_path, early_dict, late_dict, even_dict):

	for key in early_dict.keys():
		path_early 	= early_dict[key]
		path_late 	= late_dict[key]
		path_even 	= even_dict[key]

		early_x, early_y 	= get_xy_from_path(path_early)
		late_x, late_y 		= get_xy_from_path(path_late)
		even_x, even_y 		= get_xy_from_path(path_even)


		plt.figure(figsize=(5, 4))
		f, ax = plt.subplots()

		buffer = 2
		ax = plt.gca()
		ax.set_xlim([goal_a[0] - buffer, goal_c[0] + buffer])
		ax.set_ylim([goal_d[1] - buffer, goal_a[1] + buffer])
		ax.set_aspect('equal')

		plt.plot(early_x, 	early_y, 	 'o--',label = "early", color='red', lw=2)
		plt.plot(late_x, 	late_y, 	 'o--',label = "late", color='green', lw=2)
		plt.plot(even_x, 	even_y, 	 'o--',label = "even", color='blue', lw=2)
		 
		plt.title('Path options for ' + key)
			 
		for j in range(len(goal_list)):
			goal 	= goal_list[j]
			color = goal_colors[j]
			circle = plt.Circle(goal, .1, color=color)
			ax.add_patch(circle)

		# show a legend on the plot
		plt.legend() #loc='upper center', bbox_to_anchor=(0.5, 1.05), ncol=3, fancybox=True, shadow=True)
		 
		# function to show the plot
		plt.savefig(inspection_save_path + key + '.png')
		plt.clf()
		plt.close()

	
	print("Exported images of all paths")		


def draw_paths_by_dict(inspection_save_path, early_dict, late_dict, even_dict, obstacle_dict):
	fig, axes = plt.subplot_mosaic("ABCD;IJKL", figsize=(8, 6), gridspec_kw={'width_ratios':[1, 1, 1, 1], 'height_ratios':[1, 1]})

	ax_mappings = {}
	ax_early 	= axes['A']
	# ax_even 	= axes['E']
	ax_late 	= axes['I']

	ax_early2 	= axes['B']
	# ax_even2 	= axes['F']
	ax_late2 	= axes['J']

	ax_early3 	= axes['C']
	# ax_even3 	= axes['G']
	ax_late3 	= axes['K']

	ax_early4 	= axes['D']
	# ax_even4 	= axes['H']
	ax_late4 	= axes['L']

	buffer = 1
	ax_early.set_xlim([goal_a[0] - buffer, goal_c[0] + buffer])
	ax_early.set_ylim([goal_d[1] - buffer, goal_a[1] + buffer])
	ax_early.set_aspect('equal')

	# ax_even.set_xlim([goal_a[0] - buffer, goal_c[0] + buffer])
	# ax_even.set_ylim([goal_d[1] - buffer, goal_a[1] + buffer])
	# ax_even.set_aspect('equal')

	ax_late.set_xlim([goal_a[0] - buffer, goal_c[0] + buffer])
	ax_late.set_ylim([goal_d[1] - buffer, goal_a[1] + buffer])
	ax_late.set_aspect('equal')

	ax_early2.set_xlim([goal_a[0] - buffer, goal_c[0] + buffer])
	ax_early2.set_ylim([goal_d[1] - buffer, goal_a[1] + buffer])
	ax_early2.set_aspect('equal')

	# ax_even2.set_xlim([goal_a[0] - buffer, goal_c[0] + buffer])
	# ax_even2.set_ylim([goal_d[1] - buffer, goal_a[1] + buffer])
	# ax_even2.set_aspect('equal')

	ax_late2.set_xlim([goal_a[0] - buffer, goal_c[0] + buffer])
	ax_late2.set_ylim([goal_d[1] - buffer, goal_a[1] + buffer])
	ax_late2.set_aspect('equal')

	ax_early3.set_xlim([goal_a[0] - buffer, goal_c[0] + buffer])
	ax_early3.set_ylim([goal_d[1] - buffer, goal_a[1] + buffer])
	ax_early3.set_aspect('equal')

	# ax_even3.set_xlim([goal_a[0] - buffer, goal_c[0] + buffer])
	# ax_even3.set_ylim([goal_d[1] - buffer, goal_a[1] + buffer])
	# ax_even3.set_aspect('equal')

	ax_late3.set_xlim([goal_a[0] - buffer, goal_c[0] + buffer])
	ax_late3.set_ylim([goal_d[1] - buffer, goal_a[1] + buffer])
	ax_late3.set_aspect('equal')

	ax_early4.set_xlim([goal_a[0] - buffer, goal_c[0] + buffer])
	ax_early4.set_ylim([goal_d[1] - buffer, goal_a[1] + buffer])
	ax_early4.set_aspect('equal')

	# ax_even4.set_xlim([goal_a[0] - buffer, goal_c[0] + buffer])
	# ax_even4.set_ylim([goal_d[1] - buffer, goal_a[1] + buffer])
	# ax_even4.set_aspect('equal')

	ax_late4.set_xlim([goal_a[0] - buffer, goal_c[0] + buffer])
	ax_late4.set_ylim([goal_d[1] - buffer, goal_a[1] + buffer])
	ax_late4.set_aspect('equal')

	### -AB -AC -AD -AE -AF -BA -BC -BD -BE -BF -CA -CB -CD -CE -CF -DA DB DC -DE -DF -EA -EB -EC -ED -EF -FA -FB -FC -FD -FE

	title1 = "Outwards / Down"
	group1 = ['BA', 'BC', 'BD', 'BF', 'EF', 'ED', "AD", 'CF']

	title2 = "Inwards / Up"
	group2 = ['AB', 'CB', 'DA', 'FC', 'EA', 'EC', 'FE', 'DE', 'BE']

	title3 = "Long / Diagonal"
	group3 = ['AF', 'AC'] # FA, DC CD CA DF FD

	# title4 = "Short Diagonal"
	# group4 = ['AE', 'CE', 'DB', 'FB']

	title4 = "Obstacle Repulsion"
	group4 = ['AC-obs', 'AF-obs']

	### boringly flat
	# 'BE', EB

	ax_early.set_title("Early\n " + title1, fontweight="bold")
	# ax_even.set_title("Even\n " + title1, fontweight="bold")
	ax_late.set_title("Late\n " + title1, fontweight="bold")

	ax_early2.set_title("Early\n " + title2, fontweight="bold")
	# ax_even2.set_title("Even\n " + title2, fontweight="bold")
	ax_late2.set_title("Late\n " + title2, fontweight="bold")

	ax_early3.set_title("Early\n " + title3, fontweight="bold")
	# ax_even3.set_title("Even\n " + title3, fontweight="bold")
	ax_late3.set_title("Late\n " + title3, fontweight="bold")

	ax_early4.set_title("Early\n " + title4, fontweight="bold")
	# ax_even4.set_title("Even\n " + title4, fontweight="bold")
	ax_late4.set_title("Late\n " + title4, fontweight="bold")

	for j in range(len(goal_list)):
		goal 	= goal_list[j]
		color = goal_colors[j]

		circle1 = plt.Circle(goal, .1, color=color)
		ax_early.add_patch(circle1)

		circle2 = plt.Circle(goal, .1, color=color)
		ax_late.add_patch(circle2)
		
		# circle3 = plt.Circle(goal, .1, color=color)
		# ax_even.add_patch(circle3)

		circle4 = plt.Circle(goal, .1, color=color)
		ax_early2.add_patch(circle4)

		circle5 = plt.Circle(goal, .1, color=color)
		ax_late2.add_patch(circle5)
		
		# circle6 = plt.Circle(goal, .1, color=color)
		# ax_even2.add_patch(circle6)

		circle7 = plt.Circle(goal, .1, color=color)
		ax_early3.add_patch(circle7)

		circle8 = plt.Circle(goal, .1, color=color)
		ax_late3.add_patch(circle8)
		
		# circle9 = plt.Circle(goal, .1, color=color)
		# ax_even3.add_patch(circle9)

		circle10 = plt.Circle(goal, .1, color=color)
		ax_early4.add_patch(circle10)

		circle11 = plt.Circle(goal, .1, color=color)
		ax_late4.add_patch(circle11)
		
		# circle12 = plt.Circle(goal, .1, color=color)
		# ax_even4.add_patch(circle12)


	for key in early_dict.keys():
		path_early 	= early_dict[key]
		path_late 	= late_dict[key]
		# path_even 	= even_dict[key]

		early_x, early_y 	= get_xy_from_path(path_early)
		late_x, late_y 		= get_xy_from_path(path_late)
		# even_x, even_y 		= get_xy_from_path(path_even)


		if key in group1:
			# ax_early.plot(early_x, 	early_y, 	 label = "early", color='red', markersize=0, linestyle='solid')
			# ax_late.plot(late_x, 	late_y, 	 label = "late", color='green', markersize=0, linestyle='solid')
			# ax_even.plot(even_x, 	even_y, 	label = "even", color='blue')

			ax_early.scatter(early_x, 	early_y, c='red', s=8,zorder=10)
			ax_late.scatter(late_x, 	late_y, c='blue', s=8,zorder=10)


		elif key in group2:
			ax_early2.plot(early_x, 	early_y, 	 'o--',label = "early", color='red', markersize=0, linestyle='solid')
			ax_late2.plot(late_x, 	late_y, 	 'o--',label = "late", color='green', markersize=0, linestyle='solid')
			# ax_even2.plot(even_x, 	even_y, 	label = "even", color='blue')

		elif key in group3:
			ax_early3.plot(early_x, 	early_y, 	 'o--',label = "early", color='red', markersize=0, linestyle='solid')
			ax_late3.plot(late_x, 	late_y, 	 'o--',label = "late", color='green', markersize=0, linestyle='solid')
			# ax_even3.plot(even_x, 	even_y, 	label = "even", color='blue')

		elif key in group4:
			ax_early4.plot(early_x, 	early_y, 	 'o--',label = "early", color='red', markersize=0, linestyle='solid')
			ax_late4.plot(late_x, 	late_y, 	 'o--',label = "late", color='green', markersize=0, linestyle='solid')
			# ax_even4.plot(even_x, 	even_y, 	label = "even", color='blue')
		 
		# plt.title('Path options for ' + key)
			 
	##### Add the obstacle paths
	AC_early 	= obstacle_dict['AC_OBS-early']
	AC_late 	= obstacle_dict['AC_OBS-late']
	# AC_even 	= obstacle_dict['AC_OBS-even']

	AF_early 	= obstacle_dict['AF_OBS-early']
	AF_late 	= obstacle_dict['AF_OBS-late']
	# AF_even 	= obstacle_dict['AF_OBS-even']


	AC_early_x, AC_early_y 		= get_xy_from_path(AC_early)
	AC_late_x, AC_late_y 		= get_xy_from_path(AC_late)
	# AC_even_x, AC_even_y 		= get_xy_from_path(AC_even)

	AF_early_x, AF_early_y 		= get_xy_from_path(AF_early)
	AF_late_x, AF_late_y 		= get_xy_from_path(AF_late)
	# AF_even_x, AF_even_y 		= get_xy_from_path(AF_even)


	ax_early4.plot(AC_early_x, 	AC_early_y, 	label = "early", color='red')
	ax_late4.plot(AC_late_x, 	AC_late_y, 	label = "late", color='green')
	# ax_even4.plot(AC_even_x, 	AC_even_y, 	label = "even", color='blue')


	ax_early4.plot(AF_early_x, 	AF_early_y, 	label = "early", color='red')
	ax_late4.plot(AF_late_x, 	AF_late_y, 	label = "late", color='green')
	# ax_even4.plot(AF_even_x, 	AF_even_y, 	label = "even", color='blue')


	# show a legend on the plot
	# plt.legend() #loc='upper center', bbox_to_anchor=(0.5, 1.05), ncol=3, fancybox=True, shadow=True)
	 
	# function to show the plot
	plt.tight_layout()
	plt.savefig(inspection_save_path + "overview-final" + '.png')
	print(inspection_save_path + "overview-final" + '.png')
	plt.clf()
	plt.close()

	
	print("Exported images of all paths")


def draw_obstacle_sets(inspection_save_path, early_dict, late_dict, even_dict, obstacle_paths):
	pass

def count_path_lengths(inspection_save_path, early_dict, late_dict, even_dict, obstacle_dict):
	# Create a csv of the lengths for each path

	length_rows = []
	for key in early_dict.keys():
		early_length 	= get_path_length(early_dict[key])
		late_length 	= get_path_length(late_dict[key])
		even_length 	= "" #get_path_length(even_dict[key])


		percent_a = (late_length - early_length) / late_length
		percent_b = (early_length - late_length) / early_length

		row = [key, early_length, late_length, percent_a, percent_b]

		length_rows.append(row)


	obstacle_dict_pairs = obstacle_dict.keys()
	obstacle_dict_pairs = [od.replace('-early', "") for od in obstacle_dict_pairs]
	obstacle_dict_pairs = [od.replace('-late', "") for od in obstacle_dict_pairs]

	for key in obstacle_dict_pairs:
		early_length 	= get_path_length(obstacle_dict[key + "-early"])
		late_length 	= get_path_length(obstacle_dict[key + "-late"])

		percent_a = (late_length - early_length) / late_length
		percent_b = (early_length - late_length) / early_length

		row = [key, early_length, late_length, percent_a, percent_b]

		length_rows.append(row)



	df = pd.DataFrame(length_rows, columns=['PATH', 'early', 'late', 'pct_late', 'pct_early'])
	df.to_csv(inspection_save_path + "lengths.csv")

	
def dist_between(x1, x2):
        # print(x1)
        # print(x2)
        # print(x1[0], x2[0], x1[1], x2[1])

        distance = np.sqrt((x1[0] - x2[0])**2 + (x1[1] - x2[1])**2)
        return distance

def get_path_length(path):
	total_length = 0
	for pi in range(1, len(path)):
		p0 = path[pi - 1]
		p1 = path[pi]

		total_length += dist_between(p0, p1)
	return total_length


ramp_a = [goal_a, [goal_a[0], goal_a[1] + .05], [goal_a[0], goal_a[1] + .1], [goal_a[0], goal_a[1] + .15], [goal_a[0], goal_a[1] + .2], [goal_a[0], goal_a[1] + .25], [goal_a[0], goal_a[1] + .3], [goal_a[0], goal_a[1] + .35]]
ramp_b = [goal_b, [goal_b[0], goal_b[1] + .05], [goal_b[0], goal_b[1] + .1], [goal_b[0], goal_b[1] + .15], [goal_b[0], goal_b[1] + .2], [goal_b[0], goal_b[1] + .25], [goal_b[0], goal_b[1] + .3], [goal_b[0], goal_b[1] + .35]]
ramp_c = [goal_c, [goal_c[0], goal_c[1] + .05], [goal_c[0], goal_c[1] + .1], [goal_c[0], goal_c[1] + .15], [goal_c[0], goal_c[1] + .2], [goal_c[0], goal_c[1] + .25], [goal_c[0], goal_c[1] + .3], [goal_c[0], goal_c[1] + .35]]
ramp_d = [goal_d, [goal_d[0], goal_d[1] - .05], [goal_d[0], goal_d[1] - .1], [goal_d[0], goal_d[1] - .15], [goal_d[0], goal_d[1] - .2], [goal_d[0], goal_d[1] - .25], [goal_d[0], goal_d[1] - .3], [goal_d[0], goal_d[1] + .35]]
ramp_e = [goal_e, [goal_e[0], goal_e[1] - .05], [goal_e[0], goal_e[1] - .1], [goal_e[0], goal_e[1] - .15], [goal_e[0], goal_e[1] - .2], [goal_e[0], goal_e[1] - .25], [goal_e[0], goal_e[1] - .3], [goal_e[0], goal_e[1] + .35]]
ramp_f = [goal_f, [goal_f[0], goal_f[1] - .05], [goal_f[0], goal_f[1] - .1], [goal_f[0], goal_f[1] - .15], [goal_f[0], goal_f[1] - .2], [goal_f[0], goal_f[1] - .25], [goal_f[0], goal_f[1] - .3], [goal_f[0], goal_f[1] + .35]]

ramps = {}
ramps['A'] = ramp_a
ramps['B'] = ramp_b
ramps['C'] = ramp_c
ramps['D'] = ramp_d
ramps['E'] = ramp_e
ramps['F'] = ramp_f

def add_offramps(path_dict):
	new_path_dict = {}

	for key in path_dict.keys():
		end_point = key[1]
		new_path_dict[key] = path_dict[key] + ramps[end_point]

		if len(path_dict[key]) > 0:
			dist = dist_between(path_dict[key][-1], ramps[end_point][0])
			if dist > .51:
				print(key)
				print(dist)


	return new_path_dict


def get_early_paths():
	tag = 'early'

	path_ab = [[1.0, -1.0], [1.2900086108419888, -0.7530968277028878], [1.5326131861312136, -0.563870378673592], [1.7331356014741433, -0.428053403454109], [1.8968782424338746, -0.34085685298818574], [2.0292799758346884, -0.2975697416824669], [2.132489843759339, -0.29596599897736564], [2.208601907197292, -0.33431086361277346], [2.287321793712234, -0.390016261958912], [2.3685235822791832, -0.4619300924512736], [2.4512191210544403, -0.5435280485663146], [2.534292001916787, -0.6275712992913405], [2.6174250901534433, -0.7120055118817148], [2.700566987150271, -0.796496612047891], [2.783710117425584, -0.8809957453939968], [2.8668534341455674, -0.9654960675552924], [2.9499967925365715, -1.0499966145808957]]
	path_ac = [[1.0, -1.0], [1.070137191477684, -1.0684129991438087], [1.1369962191274818, -1.1401041622240118], [1.204610681740745, -1.2110398905855024], [1.2753564523072172, -1.2788443108538867], [1.3503228872202475, -1.342428066380115], [1.4294904105662591, -1.4018107335556271], [1.5117367210625188, -1.4581146136832661], [1.5946808079079675, -1.5137207173339664], [1.6900584265619636, -1.556893288975543], [1.7999745132625755, -1.5874064980702483], [1.9240398650669253, -1.605647354999098], [2.0616083098812807, -1.6121640097039893], [2.2091469609910632, -1.6083846818271024], [2.3659587114556397, -1.5950117607585441], [2.5156887408796584, -1.5768001181851945], [2.658882874645599, -1.5538975901475165], [2.8020770089840252, -1.525814792828815], [2.945271143163374, -1.4948279917430007], [3.0884652773612786, -1.4631613344526346], [3.2316594118826174, -1.431394112520958], [3.374853546746325, -1.3996133425381931], [3.518047681974779, -1.3678307721749634], [3.661241817205157, -1.3360479632592304], [3.804435956809333, -1.304265121307404], [3.947630096796795, -1.2724822750774114], [4.090824236715288, -1.2406994283188169], [4.23401837657134, -1.2089165815060345], [4.377212516433794, -1.1771337346811062], [4.520406656322612, -1.1453508878407124], [4.663600796313688, -1.1135680409451805], [4.80679493631433, -1.08178519404448], [4.949989076311325, -1.0500023471457172]]
	path_ad = [[1.0, -1.0], [0.6973118526447455, -1.3464168007561812], [0.4852253558237619, -1.6178007108495702], [0.3272523358279763, -1.847197664715945], [0.21810217258401768, -2.0406473510601675], [0.1528503899240416, -2.2034443602805087], [0.1275063880881212, -2.339767032558422], [0.13912049356333622, -2.452696817138602], [0.1853857492328317, -2.544563560169027], [0.26210250763121656, -2.618513442481937], [0.35621117643595723, -2.6824831982596686], [0.4545590109115881, -2.7440707921481624], [0.5535642209783596, -2.8052964849679416], [0.6526625494574246, -2.866472015664823], [0.7517739680594719, -2.9276406730774], [0.8508871804551823, -2.9888084074939805], [0.9500006187117132, -3.0499760239299123]]
	path_ae = [[1.0, -1.0], [1.0993452322067239, -1.0744240400646206], [1.198331409415434, -1.149207118322848], [1.3074364557315141, -1.2138713713310931], [1.4390633251996632, -1.2560137547608121], [1.5589683289945415, -1.3098780028942403], [1.6666270398159844, -1.3759886009471625], [1.770976852025361, -1.4517260372961294], [1.87494454436189, -1.5285540576846062], [1.9782942104795576, -1.6067917513598153], [2.0652041726505637, -1.7015923857659998], [2.1361907224295535, -1.812433662660791], [2.2086378767760686, -1.9250374660908625], [2.2812360242579177, -2.038984897658427], [2.3554652102104936, -2.1516522439654553], [2.4297798144223965, -2.2639821506510778], [2.5041032016177516, -2.3762715019080867], [2.578419958808133, -2.4885581878919028], [2.652735763279363, -2.600844433304009], [2.7270514632212315, -2.7131306119216303], [2.8013671474856805, -2.8254167839878273], [2.87568283224588, -2.93770295264504], [2.9499985208589994, -3.049989117402151]] #[[1.0, -1.0], [1.1073518986088022, -1.0750852876432029], [1.2010904244059681, -1.1637839867937376], [1.2823621429751277, -1.264949430681716], [1.355092351328065, -1.3746564502155167], [1.4234192777871426, -1.4887665923309048], [1.4913212792680142, -1.603301732217868], [1.5617151065494643, -1.7153451595373859], [1.636540873576316, -1.822956646862734], [1.7169145262289522, -1.925020308109006], [1.8032262769220735, -2.021145768681018], [1.894622966125363, -2.1117381462195812], [1.989634848601455, -2.19828317545417], [2.085786555191, -2.283445444555702], [2.1819368156653507, -2.3685321433735718], [2.2780409750299393, -2.453658231111498], [2.374047955676469, -2.538841225097957], [2.4700416317403264, -2.624032462090378], [2.566033173607143, -2.709224879481786], [2.662024403451633, -2.7944172577370634], [2.758015628283966, -2.879609604011806], [2.854006845548093, -2.964801952788175], [2.9499980530841725, -3.0499943103779814]]
	path_af = [[1.0, -1.0], [1.1245329930202155, -1.094758120591664], [1.2319032974957411, -1.2151016670455976], [1.3343161968439536, -1.3384350211975897], [1.4386005307049214, -1.4584688786001987], [1.5592793457988854, -1.5678101901486865], [1.6995909163678986, -1.6642144648626338], [1.8587120489414042, -1.7487698961954], [2.009305734846439, -1.8314138090101941], [2.1665170100151223, -1.8983719431218267], [2.323360778741101, -1.9536415150669495], [2.479824572405001, -1.9968789344313518], [2.6358587264967133, -2.027876468814201], [2.7913681604333656, -2.073570825207726], [2.946241572298187, -2.131020800299172], [3.1005916625038, -2.199026865600126], [3.2547552332629635, -2.269536226913062], [3.408876891136628, -2.3404227662779418], [3.5629900989632852, -2.411372021992301], [3.7171019983221996, -2.4823293028676168], [3.8712136407176554, -2.553287649434818], [4.025325229499445, -2.6242461259171805], [4.179436813826897, -2.695204615722572], [4.33354840631328, -2.766163101549239], [4.487659998774542, -2.8371215873541273], [4.641771590322849, -2.9080800736573047], [4.7958831827307264, -2.979038559570849], [4.949994776867857, -3.049997044704904]]

	# # generate_vanilla_straight_line_paths_for_testing(goal_b, [goal_a, goal_c, goal_d, goal_e, goal_f])
	path_bc = [[3.0, -1.0], [3.4188633729998408, -0.7552786791450201], [3.716196211497597, -0.5692030123566075], [3.950181446046529, -0.4455162060842515], [4.145923719438314, -0.376730219202704], [4.283696911401175, -0.34892998377094636], [4.375328068907346, -0.35585801532953326], [4.454969539039409, -0.38396639502554397], [4.524172685938499, -0.43156877124391724], [4.583979919255225, -0.4968694825057302], [4.637876310394277, -0.5730268849159894], [4.690157052944371, -0.6520651766554977], [4.742162553474759, -0.7315861890580081], [4.794126450847634, -0.8111800404108194], [4.846084310302697, -0.8907845967916005], [4.898041307614097, -0.9703907039324433], [4.949998182278259, -1.049997033211917]]
	path_ba = horizontal_flip(path_bc)
	# vanilla straight
	path_be = []
	path_bf = [[3.0, -1.0], [3.1535838620010828, -1.155214199830029], [3.2876148400060177, -1.3417465749296051], [3.424428280674735, -1.5044813138326834], [3.5346868183262266, -1.6710571216057797], [3.6247468699309824, -1.834041439730148], [3.700023065439402, -1.9882753699164115], [3.7660574679660437, -2.130597395771663], [3.8234054866508824, -2.2602508394368805], [3.8723488389283, -2.376003353996739], [3.9286272341222612, -2.4720528621102], [3.990802277456827, -2.5504197148648515], [4.061430849041334, -2.614929427927878], [4.142783054131153, -2.667363646431913], [4.234287819727715, -2.7053471188185854], [4.333852912341066, -2.7359343339591717], [4.4374382913502, -2.7636919996421137], [4.54034495364342, -2.7921990400717487], [4.638973255178657, -2.8255395507680547], [4.728858290208941, -2.868686847707736], [4.803372857138926, -2.928122205429234], [4.877239274036631, -2.98835075394854], [4.949975600899694, -3.0499792653617117]]
	path_bd = horizontal_flip(path_bf)

	path_dict = {}
	path_dict['AB'] = path_ab
	path_dict['AC'] = path_ac
	path_dict['AD'] = path_ad
	path_dict['AE'] = path_ae
	path_dict['AF'] = path_af

	path_dict['BA'] = path_ba
	path_dict['BC'] = horizontal_flip(path_ba)
	path_dict['BD'] = path_bd
	path_dict['BE'] = path_be
	path_dict['BF'] = horizontal_flip(path_bd)

	path_dict = add_offramps(path_dict)

	# Return the name and the list
	return path_dict

def get_late_paths():
	### AC, AF, BA
	path_ab = [[1.0, -1.0], [1.139197370383164, -0.9428408708041127], [1.2783947022313513, -0.8856817894653627], [1.4175917456164873, -0.8285230667819355], [1.5567866613018349, -0.7713669404045002], [1.6959668170071747, -0.714229548878496], [1.8350456633021839, -0.6572250660278522], [1.9734428400164423, -0.6011425476707658], [2.1077042108598616, -0.5508464280089307], [2.2265142153963184, -0.5233214442259632], [2.3202308825573135, -0.5338167532386597], [2.4167220098063034, -0.5644084669114453], [2.5162582004317358, -0.6158136141965511], [2.61909123422008, -0.688797819227689], [2.7254797751049247, -0.7844365406250485], [2.835691151881214, -0.9041946888940767], [2.949995747817214, -1.0499943875598339]]
	path_ac = [[1.0, -1.0], [1.1498092136791775, -1.0374347459206497], [1.2996184273583482, -1.0748694918412998], [1.4494276410375384, -1.1123042377619372], [1.5992368547168245, -1.1497389836824583], [1.7490460683969757, -1.1871737296021352], [1.8988552820838853, -1.2246084755159778], [2.048664495818083, -1.2620432213892148], [2.1984737095523537, -1.2994779671151615], [2.3482829232866074, -1.3369127117346515], [2.4980921370209166, -1.3743474480477316], [2.6479013507552165, -1.4117821220527917], [2.7977105644893228, -1.4492163290335784], [2.947519778223643, -1.4866470388015944], [3.097328991958193, -1.5240516262424506], [3.2471382056925293, -1.5612638351156771], [3.396947419427171, -1.5971857627885964], [3.546756633161801, -1.6276262997662352], [3.6965658468963536, -1.6482331774076928], [3.8465748316691815, -1.6574746759830592], [3.9968084147221576, -1.6547385875082117], [4.147056665329427, -1.6396407333788232], [4.297317197903731, -1.611762613243981], [4.447586732527683, -1.5709588810033972], [4.597861040450443, -1.5175659161096533], [4.748134923206579, -1.4520179641887891], [4.853646122343416, -1.392412250530775], [4.935796699582601, -1.3333935699973531], [4.992858594098143, -1.275063752751158], [5.023446501501771, -1.2175145656417774], [5.026636513657088, -1.1608138106942496], [5.002067500207655, -1.1049883504747902], [4.950001995707094, -1.0500020874400975]]
	path_ad = [[1.0, -1.0], [0.9241794547078082, -1.1700139532178016], [0.8483591494275136, -1.340027654303158], [0.7725406856001354, -1.5100404986702611], [0.6967274730246248, -1.6800516080879513], [0.6209321333678215, -1.8500479538840535], [0.545255914026754, -2.0199522658552644], [0.47042588776931793, -2.189258719838303], [0.40073573087466596, -2.3550991019992424], [0.35081705645956013, -2.5082662702873924], [0.3331692321320707, -2.641800738374603], [0.34958076523656745, -2.75558903419184], [0.39964755897071297, -2.8507094710825096], [0.4834099021621462, -2.9278557039945983], [0.6017247923966582, -2.9871620536163266], [0.7563534337855453, -3.0282034166867193], [0.9500006187185951, -3.0499785242609296]]
	path_ae = [[1.0, -1.0], [1.1469479008314472, -1.0758316316721552], [1.2938958016849285, -1.1516632632819865], [1.4408437028414316, -1.2274948939340316], [1.5877916022701977, -1.3033265254647846], [1.7347394882830343, -1.3791581693451833], [1.8816872714627084, -1.4549899164810436], [2.028634271844581, -1.5308224480649173], [2.1755753399462927, -1.6066609106285843], [2.322471748962186, -1.6825440317435403], [2.469038347211909, -1.7587569648757506], [2.613399290186494, -1.8371755518114057], [2.7485790358783904, -1.9248813149895416], [2.867652048230138, -2.0288879101587565], [2.9681114960956814, -2.1499425874644262], [3.049789932849268, -2.288082965789721], [3.1134043018753665, -2.4424777951902152], [3.1407803877673706, -2.581433802654852], [3.1352248786628607, -2.7047369694689873], [3.1148975800875682, -2.81245915956221], [3.0803580076517374, -2.904488212298604], [3.0318243494834243, -2.981032612043894], [2.9500055448003293, -3.049995105114468]] #[[1.0, -1.0], [1.1219586482812436, -1.0403881106168258], [1.243915235019268, -1.0807785851795801], [1.3658677140751223, -1.1211737695017734], [1.4878140495000205, -1.1615759945266966], [1.609752216377997, -1.2019875790316419], [1.7316802153334878, -1.242410824659459], [1.8535967499971713, -1.2828477440363464], [1.9755066394078964, -1.3232937116535952], [2.097389023359379, -1.363769341607614], [2.2191723530669067, -1.4043452331678636], [2.3395949507856653, -1.4454244121917506], [2.4499273409762874, -1.4962477076704876], [2.5424699884375204, -1.5641550076209112], [2.6303712311369676, -1.636352687629858], [2.7135542082138833, -1.7128802873943787], [2.7919704188984253, -1.793808624910775], [2.8622654457898578, -1.9773456946434576], [2.9234770493310287, -2.2592071967846863], [2.9657425372151005, -2.5298586348312675], [2.976316763940371, -2.7813300188475134], [2.9773485720838644, -2.9323444161121173], [2.9500054352765552, -3.049984005775869]]
	path_af = [[1.0, -1.0], [1.1560678882544453, -1.059463534496748], [1.312135776508995, -1.1189270689933657], [1.4682036647644732, -1.178390603489049], [1.6242715530266152, -1.2378541379779906], [1.7803394413356517, -1.2973176724202482], [1.9364073299131361, -1.3567812065414886], [2.0924752203121972, -1.4162447383992447], [2.248543110711283, -1.4757082607823795], [2.404611001110398, -1.5351717102060962], [2.5606788915094953, -1.5946345981861865], [2.716746781908614, -1.654093169735651], [2.8728146723080026, -1.7135186406653031], [3.0288825627074476, -1.7726938719704042], [3.1849504531066395, -1.8301469743923182], [3.3410183435058243, -1.8860810790181932], [3.4970862339046485, -1.9364707637846248], [3.653154124303853, -1.9766138005198488], [3.8092220147027356, -2.0006413422962224], [3.9658056024991204, -2.053108602288824], [4.12176353653132, -2.1355172028904708], [4.277213681413554, -2.2468347565919293], [4.432134497510994, -2.3870089051771806], [4.572666371785716, -2.5233532792472926], [4.695267670039564, -2.6594142505041685], [4.7999393102487975, -2.7927854563249355], [4.885275554092379, -2.923062594543886], [4.949997501437446, -3.049995126085916]]

	# # generate_vanilla_straight_line_paths_for_testing(goal_b, [goal_a, goal_c, goal_d, goal_e, goal_f])
	path_ba = [[3.0, -1.0], [2.84464712734914, -0.9437842454773084], [2.689294368681327, -0.8875685328710651], [2.533942494290066, -0.8313531798578918], [2.3785964105698034, -0.7751403078153123], [2.2232881212847135, -0.7189450624647438], [2.06821094945589, -0.6628676931850418], [1.9132805900558933, -0.6080192909034989], [1.7588930851844709, -0.5587924387634673], [1.6029339759062708, -0.5293139489783156], [1.465165324747436, -0.5264009658033867], [1.343821126251378, -0.5495129200748203], [1.2370609269874855, -0.5973628202794585], [1.1441171090451845, -0.6698407472933501], [1.06485140195943, -0.7678536483867996], [0.9997505720510083, -0.8934360265065577], [0.9500076227087499, -1.0499937361142258]]
	path_bc = None
	path_be = []
	# 5.75 lambda
	path_bf = [[3.0, -1.0], [3.1241279668275084, -1.0804903831498067], [3.2482559351959504, -1.1609807652544835], [3.3723839065805605, -1.2414711478582938], [3.496511879457595, -1.3219615265248745], [3.6206398491608605, -1.4024519141216643], [3.744767806944641, -1.482942321290396], [3.8688955546723474, -1.563432930765803], [3.99302165561885, -1.64392518726675], [4.1171342730043605, -1.7244309143492211], [4.241140430234065, -1.8050431054807565], [4.364393825427494, -1.8864080571040973], [4.484343584209294, -1.9785556228419903], [4.598418958698763, -2.0853887179816013], [4.706162709982264, -2.2089308321904535], [4.8079450924514715, -2.3384343240875674], [4.892381089261572, -2.4669015066450966], [4.959076001243545, -2.5934485803722223], [4.998343629684881, -2.7092807629645765], [5.009228395158241, -2.8144016854993454], [5.004197033128171, -2.9063286494111926], [4.984146377574358, -2.9848611037218293], [4.950009513246287, -3.049987050347337]]
	path_bd = horizontal_flip(path_bf)


	path_dict = {}
	path_dict['AB'] = path_ab
	path_dict['AC'] = path_ac
	path_dict['AD'] = path_ad
	path_dict['AE'] = path_ae
	path_dict['AF'] = path_af

	path_dict['BA'] = path_ba
	path_dict['BC'] = horizontal_flip(path_ba)
	path_dict['BD'] = path_bd
	path_dict['BE'] = path_be
	path_dict['BF'] = horizontal_flip(path_bd)

	path_dict = add_offramps(path_dict)

	# Return the name and the list
	return path_dict

def get_even_paths():
	path_ab = [[1.0, -1.0], [1.139197370383164, -0.9428408708041127], [1.2783947022313513, -0.8856817894653627], [1.4175917456164873, -0.8285230667819355], [1.5567866613018349, -0.7713669404045002], [1.6959668170071747, -0.714229548878496], [1.8350456633021839, -0.6572250660278522], [1.9734428400164423, -0.6011425476707658], [2.1077042108598616, -0.5508464280089307], [2.2265142153963184, -0.5233214442259632], [2.3202308825573135, -0.5338167532386597], [2.4167220098063034, -0.5644084669114453], [2.5162582004317358, -0.6158136141965511], [2.61909123422008, -0.688797819227689], [2.7254797751049247, -0.7844365406250485], [2.835691151881214, -0.9041946888940767], [2.949995747817214, -1.0499943875598339]]
	path_ac = [[1.0, -1.0], [1.0748196861171284, -1.0769025069421758], [1.1510191007001955, -1.1524252947512483], [1.2359389198892856, -1.2192276770156572], [1.329518973053761, -1.2773698834949598], [1.4360123037692638, -1.3261923229775312], [1.555001624432835, -1.3661270545384543], [1.6775878220241693, -1.400629909769473], [1.8049413196711908, -1.4295335474562716], [1.936955736009406, -1.4529514800416965], [2.0733826083096747, -1.471047180605778], [2.2098094616428736, -1.4855025294443869], [2.346236295486091, -1.496266545532588], [2.482663075136035, -1.5032881485305505], [2.6190899072711202, -1.5065175876613757], [2.755516731232521, -1.5058981894154595], [2.8919435434227223, -1.5014016187100456], [3.0283703582566437, -1.493023045232766], [3.1647972035744414, -1.4807779288149454], [3.3012240495401173, -1.464692042106218], [3.437650874664959, -1.4448012421894467], [3.5771074842663806, -1.4203726608267624], [3.719600973078941, -1.3915044977848106], [3.8652058533344755, -1.3583311522253914], [4.008686401283216, -1.323628610803148], [4.147678078516748, -1.288993401909212], [4.281670038017043, -1.254440742855777], [4.410130289721114, -1.2199881525790282], [4.532507256490395, -1.1856556290954063], [4.648238726866099, -1.1514655789451307], [4.756762808644261, -1.1174423568559133], [4.857527026361652, -1.0836117595039896], [4.9499975326883074, -1.0500004036841404]]
	path_ad = [[1.0, -1.0], [0.8596585733744453, -1.2278157302601582], [0.7506099468369825, -1.429360149990184], [0.6610811352403071, -1.6152200795561678], [0.5905174725456657, -1.7863798919744107], [0.5381214866712465, -1.943992112552087], [0.502977246642973, -2.0892555682167457], [0.4841517031388481, -2.223321807981366], [0.48077102468440847, -2.347233610381561], [0.49207082387717216, -2.4618909852829196], [0.5174288086224761, -2.568038072828005], [0.5563800969767213, -2.666264424943885], [0.6086224516546559, -2.7570154883145355], [0.6740150527583179, -2.840607364672642], [0.7525738600524818, -2.917242802796254], [0.8444654108916714, -2.987026164741242], [0.9500006187288894, -3.04997619706652]]
	path_ae = [[1.0, -1.0], [1.0571786223499102, -1.1605751484788112], [1.1262653504600504, -1.3092421324379595], [1.194691061353501, -1.4585701615846007], [1.2626860431864937, -1.6083290353285369], [1.330482503621384, -1.758286448205167], [1.3983290498680163, -1.9081937651545207], [1.4664927400419028, -2.0577841672684545], [1.5352545320783861, -2.206776608698673], [1.604902913132665, -2.354882578137259], [1.695133642063655, -2.4959463187480875], [1.8067245028497423, -2.629669644297157], [1.9476313570384243, -2.7355540894967154], [2.1174468817641983, -2.8140489143500753], [2.314597117845594, -2.8666788197729653], [2.4816913096208406, -2.9067227867044974], [2.6106182013647325, -2.9413324213537453], [2.7138132109857276, -2.972681225319436], [2.794329274334708, -3.000270573127519], [2.856480887615702, -3.0223141295670453], [2.9024798175902697, -3.038072272533793], [2.9346061664500085, -3.0468671039283572], [2.9500011715796535, -3.0499961502334796]]
	path_af = [[1.0, -1.0], [1.100195483042804, -1.1209398879293098], [1.2082709502225033, -1.2339997852703726], [1.32425633510361, -1.3391497323413009], [1.4481374111656675, -1.43640384967054], [1.579854839188333, -1.5258215513023352], [1.7193026246053407, -1.6075088773035395], [1.868446180365881, -1.6812519962004642], [2.0269415034478606, -1.747320626718026], [2.1854368194545626, -1.809169001697067], [2.3439321800753725, -1.866625830070872], [2.5024275771726905, -1.9195289539994282], [2.660922991029325, -1.9677264730117252], [2.81941841649772, -2.0110780950978584], [2.9779138491922144, -2.049456347437308], [3.1364092524608864, -2.082747301181042], [3.294904627130814, -2.126881905953286], [3.4533999979143273, -2.181430242378275], [3.6118953661506152, -2.2460378925944893], [3.770390756816983, -2.320404266737441], [3.9291496177736605, -2.4049144488652914], [4.088240819277836, -2.498755344764352], [4.243661336375082, -2.5921760766000617], [4.3949850478729084, -2.6850999540996425], [4.5417607993813505, -2.7774414128073497], [4.683516017564791, -2.8691065073221598], [4.819761128303207, -2.9599938662559144], [4.949994776519084, -3.049996149308088]]

	path_bc = [[3.0, -1.0], [2.74095162876091, -1.0692602834295626], [2.5293729400404517, -1.1234896879575864], [2.337875237826563, -1.1825638906443194], [2.165470531754623, -1.2476943516307293], [1.9971431868115719, -1.2918163474180322], [1.8320376913607022, -1.311331318244287], [1.669309421821982, -1.30818305466289], [1.5082928083610854, -1.2893023370645662], [1.3486075769486117, -1.2700102935624709], [1.2730869617446985, -1.210446491983415], [1.200714670776524, -1.15075197527985], [1.1374074141858086, -1.1060213951124995], [1.0814900459276955, -1.0747521059167857], [1.0320670257694742, -1.0554212930088518], [0.9882333725503196, -1.047084435371563], [0.9500103137222297, -1.0499908879746018]]
	path_ba = horizontal_flip(path_bc)
	path_bd = []
	path_be = []
	path_bf = None

	path_dict = {}
	path_dict['AB'] = path_ab
	path_dict['AC'] = path_ac
	path_dict['AD'] = path_ad
	path_dict['AE'] = path_ae
	path_dict['AF'] = path_af

	path_dict['BA'] = path_ba
	path_dict['BC'] = horizontal_flip(path_ba)
	path_dict['BD'] = path_bd
	path_dict['BE'] = path_be
	path_dict['BF'] = horizontal_flip(path_bd)

	path_dict = add_offramps(path_dict)

	# Return the name and the list
	return path_dict

def get_obstacle_paths():
	path_ac_early 	= [] #[[1.0, -1.0], [1.0576139983695487, -0.6787087155380742], [1.121395731328799, -0.4501874092957242], [1.1926379656878632, -0.31426761863592734], [1.271224855617254, -0.27929591389755637], [1.3586334128937598, -0.21461323431753476], [1.4555028904139282, -0.2723734946099323], [1.5678322709685621, -0.3139814147343131], [1.7030663655453382, -0.44682477411256655], [1.8781327411412148, -0.6879320535452045], [2.149356385257432, -1.0261915203275538], [2.6249921849988374, -1.3995763591013937], [3.2635708362420757, -1.5022833481348965], [3.682012365102991, -1.4597916022676576], [3.892682137468808, -1.4097300287500336], [4.01388576032389, -1.3732741957574004], [4.095555061312932, -1.346747542868881], [4.159975613812198, -1.3250733362098854], [4.217121157741472, -1.30546594574257], [4.271271613885617, -1.2867090468198512], [4.324205683329496, -1.2682973684388454], [4.376647722525377, -1.250025097967837], [4.42889038853974, -1.2318092523335449], [4.481051905972994, -1.2136164896481108], [4.533180288252855, -1.1954333550680831], [4.5852952011916965, -1.1772543338810169], [4.637404741222668, -1.1590770983077205], [4.689512207378117, -1.1409006334352971], [4.741618902202493, -1.122724492756094], [4.793725319276334, -1.1045484842324544], [4.845831638968452, -1.0863725281984586], [4.89793792536343, -1.068196592719774], [4.950044200763932, -1.0500206653387512]]
	path_ac_late 	= []
	# path_ac_even 	= []

	path_af_early 	= [] #[[1.0, -1.0], [1.1289989551532633, -1.0789910820553308], [1.2598852476617508, -1.1637746626107182], [1.3924402043360675, -1.2536548308372035], [1.5263993034477734, -1.3475768185551016], [1.661426437663688, -1.4440207603774926], [1.7970689951463892, -1.540902444515892], [1.9326879758613624, -1.635532286142856], [2.0674010842923605, -1.7247529100830445], [2.211119642643209, -1.8068015021945927], [2.361008341660447, -1.8822848506936167], [2.513786375148033, -1.9532476432455013], [2.6671369792566257, -2.0221177168767985], [2.8201829716228697, -2.090425478394405], [2.972828028351959, -2.158742656006296], [3.1251831262515406, -2.2271715309607827], [3.2773621363106704, -2.295678032598627], [3.429444343717742, -2.364219377875445], [3.581477825278265, -2.432771787935006], [3.733488645965968, -2.50132623686277], [3.8854895340655977, -2.569880388031892], [4.037486223262068, -2.638434010019115], [4.189481396416992, -2.706987276317515], [4.34147594034211, -2.7755403456757604], [4.493470217620229, -2.8440933212172252], [4.645464379134971, -2.9126462563217155], [4.79745848908949, -2.9811991761934817], [4.949452575517707, -3.0497520929267012]]
	path_af_late 	= []
	# path_af_even 	= []

	# AC_OBS-even
	obstacle_paths = {}
	obstacle_paths['AC_OBS-early'] 	= path_ac_early
	# obstacle_paths['AC_OBS-even']	= path_ac_even
	obstacle_paths['AC_OBS-late']	= path_ac_late
	obstacle_paths['AF_OBS-early'] 	= path_af_early
	# obstacle_paths['AF_OBS-even'] 	= path_af_even
	obstacle_paths['AF_OBS-late'] 	= path_af_late


	obstacle_paths['FD_OBS-early'] 	= horizontal_flip(vertical_flip(path_ac_early))
	# obstacle_paths['FD_OBS-even']	= horizontal_flip(vertical_flip(path_ac_even))
	obstacle_paths['FD_OBS-late']	= horizontal_flip(vertical_flip(path_ac_late))

	obstacle_paths['DF_OBS-early'] 	= vertical_flip(path_ac_early)
	# obstacle_paths['DF_OBS-even'] 	= vertical_flip(path_ac_even)
	obstacle_paths['DF_OBS-late'] 	= vertical_flip(path_ac_late)

	obstacle_paths['CA_OBS-early'] 	= horizontal_flip(path_ac_early)
	# obstacle_paths['CA_OBS-even']	= horizontal_flip(path_ac_even)
	obstacle_paths['CA_OBS-late']	= horizontal_flip(path_ac_late)

	obstacle_paths['CD_OBS-early'] 	= horizontal_flip(path_af_early)
	# obstacle_paths['CD_OBS-even'] 	= horizontal_flip(path_af_even)
	obstacle_paths['CD_OBS-late'] 	= horizontal_flip(path_af_late)

	obstacle_paths['FA_OBS-early'] 	= horizontal_flip(vertical_flip(path_af_early))
	# obstacle_paths['FA_OBS-even']	= horizontal_flip(vertical_flip(path_af_even))
	obstacle_paths['FA_OBS-late']	= horizontal_flip(vertical_flip(path_af_late))
	
	obstacle_paths['DC_OBS-early'] 	= vertical_flip(path_af_early)
	# obstacle_paths['DC_OBS-even'] 	= vertical_flip(path_af_even)
	obstacle_paths['DC_OBS-late'] 	= vertical_flip(path_af_late)

	obstacle_paths = add_offramps(obstacle_paths)

	# # generate_vanilla_straight_line_paths_for_testing(goal_b, [goal_a, goal_c, goal_d, goal_e, goal_f])
	# Return the name and the list
	return obstacle_paths

def get_straight_line_paths():
	# VANILLA PATHS
	# generate_vanilla_straight_line_paths_for_testing(goal_a, [goal_b, goal_c, goal_d, goal_e, goal_f])

	path_ab = [[1.0, -1.0], [1.25, -1.0], [1.5, -1.0], [1.75, -1.0], [2.0, -1.0], [2.25, -1.0], [2.5, -1.0], [2.75, -1.0], [3.0, -1.0]]
	path_ac = [[1.0, -1.0], [1.5, -1.0], [2.0, -1.0], [2.5, -1.0], [3.0, -1.0], [3.5, -1.0], [4.0, -1.0], [4.5, -1.0], [5.0, -1.0]]
	path_ad = [[1.0, -1.0], [1.0, -1.25], [1.0, -1.5], [1.0, -1.75], [1.0, -2.0], [1.0, -2.25], [1.0, -2.5], [1.0, -2.75], [1.0, -3.0]]
	path_ae = [[1.0, -1.0], [1.25, -1.25], [1.5, -1.5], [1.75, -1.75], [2.0, -2.0], [2.25, -2.25], [2.5, -2.5], [2.75, -2.75], [3.0, -3.0]]
	path_af = [[1.0, -1.0], [1.5, -1.25], [2.0, -1.5], [2.5, -1.75], [3.0, -2.0], [3.5, -2.25], [4.0, -2.5], [4.5, -2.75], [5.0, -3.0]]

	# # generate_vanilla_straight_line_paths_for_testing(goal_b, [goal_a, goal_c, goal_d, goal_e, goal_f])
	path_ba = [[3.0, -1.0], [2.75, -1.0], [2.5, -1.0], [2.25, -1.0], [2.0, -1.0], [1.75, -1.0], [1.5, -1.0], [1.25, -1.0], [1.0, -1.0]]
	path_bc = [[3.0, -1.0], [3.25, -1.0], [3.5, -1.0], [3.75, -1.0], [4.0, -1.0], [4.25, -1.0], [4.5, -1.0], [4.75, -1.0], [5.0, -1.0]]
	path_bd = [[3.0, -1.0], [2.75, -1.25], [2.5, -1.5], [2.25, -1.75], [2.0, -2.0], [1.75, -2.25], [1.5, -2.5], [1.25, -2.75], [1.0, -3.0]]
	path_be = [[3.0, -1.0], [3.0, -1.25], [3.0, -1.5], [3.0, -1.75], [3.0, -2.0], [3.0, -2.25], [3.0, -2.5], [3.0, -2.75], [3.0, -3.0]]
	path_bf = [[3.0, -1.0], [3.25, -1.25], [3.5, -1.5], [3.75, -1.75], [4.0, -2.0], [4.25, -2.25], [4.5, -2.5], [4.75, -2.75], [5.0, -3.0]]

	path_dict = {}
	path_dict['AB'] = path_ab
	path_dict['AC'] = path_ac
	path_dict['AD'] = path_ad
	path_dict['AE'] = path_ae
	path_dict['AF'] = path_af

	path_dict['BA'] = path_ba
	path_dict['BC'] = horizontal_flip(path_ba)
	path_dict['BD'] = path_bd
	path_dict['BE'] = path_be
	path_dict['BF'] = horizontal_flip(path_bd)


	path_dict = add_offramps(path_dict)

	# Return the name and the list
	return path_dict

def get_bigger_path_rectangle_1():
	path_ab = [[-1.0, -1.0], [-0.625, -1.0], [-0.25, -1.0], [0.125, -1.0], [0.5, -1.0], [0.875, -1.0], [1.25, -1.0], [1.625, -1.0], [2.0, -1.0]]
	path_ac = [[-1.0, -1.0], [-0.25, -1.0], [0.5, -1.0], [1.25, -1.0], [2.0, -1.0], [2.75, -1.0], [3.5, -1.0], [4.25, -1.0], [5.0, -1.0]]
	path_ad = [[-1.0, -1.0], [-1.0, -1.375], [-1.0, -1.75], [-1.0, -2.125], [-1.0, -2.5], [-1.0, -2.875], [-1.0, -3.25], [-1.0, -3.625], [-1.0, -4.0]]
	path_ae = [[-1.0, -1.0], [-0.625, -1.375], [-0.25, -1.75], [0.125, -2.125], [0.5, -2.5], [0.875, -2.875], [1.25, -3.25], [1.625, -3.625], [2.0, -4.0]]
	path_af = [[-1.0, -1.0], [-0.25, -1.375], [0.5, -1.75], [1.25, -2.125], [2.0, -2.5], [2.75, -2.875], [3.5, -3.25], [4.25, -3.625], [5.0, -4.0]]


	path_ba = [[-1.0, -1.0], [-0.625, -1.0], [-0.25, -1.0], [0.125, -1.0], [0.5, -1.0], [0.875, -1.0], [1.25, -1.0], [1.625, -1.0], [2.0, -1.0]]
	path_bc = [[-1.0, -1.0], [-0.25, -1.0], [0.5, -1.0], [1.25, -1.0], [2.0, -1.0], [2.75, -1.0], [3.5, -1.0], [4.25, -1.0], [5.0, -1.0]]
	path_bd = [[-1.0, -1.0], [-1.0, -1.375], [-1.0, -1.75], [-1.0, -2.125], [-1.0, -2.5], [-1.0, -2.875], [-1.0, -3.25], [-1.0, -3.625], [-1.0, -4.0]]
	path_be = [[-1.0, -1.0], [-0.625, -1.375], [-0.25, -1.75], [0.125, -2.125], [0.5, -2.5], [0.875, -2.875], [1.25, -3.25], [1.625, -3.625], [2.0, -4.0]]
	path_bf = [[-1.0, -1.0], [-0.25, -1.375], [0.5, -1.75], [1.25, -2.125], [2.0, -2.5], [2.75, -2.875], [3.5, -3.25], [4.25, -3.625], [5.0, -4.0]]

	path_dict = {}
	path_dict['AB'] = path_ab
	path_dict['AC'] = path_ab
	path_dict['AD'] = path_ab
	path_dict['AE'] = path_ab
	path_dict['AF'] = path_ab

	path_dict['BA'] = path_ab
	path_dict['BC'] = path_ab
	path_dict['BD'] = path_ab
	path_dict['BE'] = path_ab
	path_dict['BF'] = path_ab

	path_dict = add_offramps(path_dict)

	# Return the name and the list
	return path_dict


def get_curvey_line_paths_1():
	# # Curvier paths from my code!
	path_ab = [[ 1., -1.], [ 1.19634799, -0.9675439], [ 1.38696757, -0.9396737], [ 1.5707822,  -0.91637407], [ 1.74675563, -0.89764527], [ 1.91389779, -0.88350265], [ 2.07127019, -0.87397608], [ 2.21799127, -0.8691097], [ 2.35324126, -0.86896153], [ 2.47626681, -0.87360334], [ 2.58638522, -0.88312052], [ 2.68298828, -0.89761207], [ 2.76554573, -0.91719071], [ 2.83360823, -0.94198308], [ 2.88680999, -0.97212998], [ 2.92487083, -1.00778683], [ 2.94759786, -1.04912413], [3, -1]]
	path_ac = [[ 1., -1.], [ 1.11368137, -0.98140284], [ 1.22742351, -0.96473847 ], [ 1.34128619, -0.94994051 ], [ 1.45532829, -0.93694329 ], [ 1.56960782, -0.92568186 ], [ 1.68418199, -0.91609189 ], [ 1.79910729, -0.90810962 ], [ 1.91443952, -0.90167181 ], [ 2.03023386, -0.89671569 ], [ 2.14654492, -0.89317886 ], [ 2.26342682, -0.89099931 ], [ 2.38093322, -0.89011529 ], [ 2.4991174,  -0.8904653  ], [ 2.61803227, -0.89198803 ], [ 2.7377305,  -0.89462229 ], [ 2.8582645,  -0.89830697 ], [ 2.97968654, -0.90298098 ], [ 3.10204875, -0.9085832  ], [ 3.22540321, -0.91505241 ], [ 3.34980198, -0.92232728 ], [ 3.47529721, -0.93034626 ], [ 3.6019411,  -0.93904756 ], [ 3.72978607, -0.9483691  ], [ 3.8588847, -0.95824843 ], [ 3.98928989, -0.9686227 ], [ 4.12105485, -0.97942859], [ 4.25423316, -0.99060226], [ 4.38887889, -1.00207931], [ 4.52504655, -1.01379468], [ 4.66279127, -1.02568264], [ 4.80216877, -1.03767672], [ 4.94323543, -1.04970963], [ 5, -1.0]]
	path_ad = [[ 1., -1. ], [ 0.95770111, -1.19513019], [ 0.92008508, -1.38473945], [ 0.88723032, -1.56795431], [ 0.85922746, -1.74393511], [ 0.83617874, -1.91187987], [ 0.81819738, -2.07102781], [ 0.80540715, -2.2206629], [ 0.79794194, -2.36011707], [ 0.79594556, -2.48877333], [ 0.79957152, -2.60606861], [ 0.80898299, -2.71149643], [ 0.82435288, -2.80460929], [ 0.84586399, -2.88502087], [ 0.8737093,  -2.9524079 ], [ 0.90809241, -3.00651185], [ 0.94922806, -3.04714029], [1.0, -3.0]]
	path_ae = [[ 1., -1.], [ 1.09347342, -1.10510911], [ 1.18688026, -1.21006585], [ 1.28015412, -1.31471796], [ 1.37322898, -1.41891336], [ 1.46603937, -1.52250028], [ 1.55852057, -1.6253273], [ 1.65060881, -1.72724353], [ 1.74224141, -1.8280986], [ 1.83335703, -1.92774283], [ 1.92389582, -2.0260273], [ 2.0137996,  -2.12280391], [ 2.10301208, -2.21792547], [ 2.19147905, -2.31124581], [ 2.27914853, -2.40261982], [ 2.36597101, -2.49190354], [ 2.45189964, -2.57895424], [ 2.53689037, -2.66363043], [ 2.62090223, -2.74579199], [ 2.70389745, -2.82530018], [ 2.78584171, -2.90201769], [ 2.86670433, -2.97580869], [ 2.94645846, -3.04653886], [3.0, -3.0] ]
	path_af = [[ 1., -1.], [ 1.13715194, -1.07246145], [ 1.27471105, -1.14595233], [ 1.41271057, -1.22038189], [ 1.55118327, -1.29565933], [ 1.69016156, -1.37169368], [ 1.82967757, -1.44839377], [ 1.96976325, -1.52566822], [ 2.11045048, -1.60342532], [ 2.25177114, -1.68157301], [ 2.39375723, -1.76001884], [ 2.53644095, -1.83866991], [ 2.67985482, -1.91743279], [ 2.82403174, -1.9962135], [ 2.96900513, -2.07491745], [ 3.11480901, -2.15344937], [ 3.26147807, -2.23171329], [ 3.40904785, -2.30961243], [ 3.55755476, -2.38704919], [ 3.70703623, -2.46392508], [ 3.85753081, -2.54014065], [ 4.00907825, -2.61559544], [ 4.16171966, -2.69018793], [ 4.31549756, -2.76381544], [ 4.47045604, -2.83637411], [ 4.62664085, -2.90775882], [ 4.78409952, -2.9778631], [ 4.94288148, -3.0465791], [5.0, -3]]

	# Some paths from my code!
	path_ba = [[ 3.0, -1.], [ 2.78503369, -0.97566994], [ 2.57910723, -0.95427874], [ 2.38289537, -0.93598619], [ 2.1970388,  -0.92095047], [ 2.02214191, -0.90932796], [ 1.85877079, -0.90127304], [ 1.70745117, -0.89693786], [ 1.56866669, -0.89647229], [ 1.44285713, -0.90002378], [ 1.33041692, -0.90773734], [ 1.23169368, -0.91975548], [ 1.14698704, -0.9362183], [ 1.07654746, -0.95726354], [ 1.02057534, -0.98302671], [ 0.97922023, -1.01364127], [ 0.95258022, -1.04923881], [1.0, -1.0]]
	path_bc = [[ 3.0, -1.], [ 3.22435566, -0.97780816], [ 3.43920927, -0.9584987],  [ 3.64344306, -0.94217732], [ 3.83599603, -0.9289503],  [ 4.01586948, -0.918924],   [ 4.18213222, -0.91220442], [ 4.33392543, -0.9088968],  [ 4.47046715, -0.90910529], [ 4.59105635, -0.91293264], [ 4.69507665, -0.92047998], [ 4.78199952, -0.93184666], [ 4.85138711, -0.94713013], [ 4.90289453, -0.96642586], [ 4.93627171, -0.9898274], [ 4.95136477, -1.01742644], [ 4.94811684, -1.04931296], [5.0, -1.0]]
	path_bd = [[ 3.0, -1.], [ 2.88602503, -1.18844841], [ 2.77447803, -1.37347181], [ 2.6653771,  -1.55407742], [ 2.55873833, -1.72929519], [ 2.4545714,  -1.89818036], [ 2.35287536, -2.05981599], [ 2.25363443, -2.21331531], [ 2.15681376, -2.35782397], [ 2.06235533, -2.49252214], [ 1.97017368, -2.6166263], [ 1.88015175, -2.72939094], [ 1.79213653, -2.83010996], [ 1.70593474, -2.91811779], [ 1.62130831, -2.99279023], [ 1.53796972, -3.053545], [ 1.45557725, -3.09984193], [ 1.37372991, -3.13118278], [ 1.2919622,  -3.14711075], [ 1.20973854, -3.14720945], [ 1.12644735, -3.13110161], [ 1.04139482, -3.0984472], [ 0.95379814, -3.04894118], [1.0, -3.0]]
	path_be = [[ 3.0, -1.], [ 2.99576749, -1.21327589], [ 2.99156891, -1.41977882], [ 2.98743628, -1.61833005], [ 2.98339959, -1.80779615], [ 2.9794867,  -1.98709555], [ 2.97572318, -2.15520468], [ 2.97213222, -2.31116383], [ 2.96873454, -2.45408261], [ 2.9655482,  -2.58314505], [ 2.96258854, -2.69761425], [ 2.95986808, -2.79683658], [ 2.95739636, -2.88024544], [ 2.95517987, -2.94736445], [ 2.95322195, -2.99781021], [ 2.95152268, -3.03129447], [ 2.9500788,  -3.04762575], [3.0, -3.0]]
	path_bf = [[ 3.0, -1.], [ 3.05262313, -1.13295336], [ 3.10357956, -1.26325768], [ 3.15359442, -1.39067955], [ 3.20337847, -1.51499112], [ 3.25363395, -1.63597215], [ 3.30506041, -1.75341204], [ 3.35836053, -1.86711181], [ 3.41424601, -1.97688612], [ 3.47344346, -2.08256518], [ 3.53670065, -2.1839967], [ 3.60479279, -2.28104788], [ 3.67852922, -2.37360729], [ 3.7587604,  -2.46158692], [ 3.84638532, -2.54492408], [ 3.94235941, -2.6235835], [ 4.04770301, -2.69755936], [ 4.16351046, -2.76687743], [ 4.29095991, -2.83159729], [ 4.43132403, -2.89181456], [ 4.58598152, -2.94766335], [ 4.75642971, -2.99931873], [ 4.94429833, -3.04699939], [5.0, -3.0]]

	path_dict = {}
	path_dict['AB'] = path_ab
	path_dict['AC'] = path_ab
	path_dict['AD'] = path_ab
	path_dict['AE'] = path_ab
	path_dict['AF'] = path_ab

	path_dict['BA'] = path_ab
	path_dict['BC'] = path_ab
	path_dict['BD'] = path_ab
	path_dict['BE'] = path_ab
	path_dict['BF'] = path_ab

	path_dict = add_offramps(path_dict)

	# Return the name and the list
	return path_dict

def get_all_possible_path_names():
	all_paths = []
	targets = ['A', 'B', 'C', 'D', 'E', 'F']

	for i in targets:
		for j in targets:
			link = i + j

			if link not in all_paths and i != j:
				all_paths.append(link)

	return all_paths

def generate_vanilla_straight_line_paths_for_testing(start, goal_list):
	N = 8
	for end_state in goal_list:
		start_state = start
		crow_flies_vector = [end_state[0] - start_state[0], end_state[1] - start_state[1]]
		step_vector = [1.0 * crow_flies_vector[0] / N, 1.0 * crow_flies_vector[1] / N]

		path = [start_state]
		print("~~")
		prev_pt = path[0]
		for i in range(N):
			pt = [prev_pt[0] + step_vector[0], prev_pt[1] + step_vector[1]]
			path.append(pt)
			prev_pt = pt

		print(path)

def horizontal_flip(path):
	center_horiz = goal_b[0]

	new_path = []
	for p in path:
		offset = (center_horiz - p[0])
		new_x = center_horiz + (offset)

		new_p = [new_x, p[1]]
		new_path.append(new_p)


	return new_path

def vertical_flip(path):
	center_horiz = (goal_a[1] + goal_d[1]) / 2.0

	new_path = []
	for p in path:
		offset = (center_horiz - p[1])
		new_y = center_horiz + (offset)
		
		new_p = [p[0], new_y]
		new_path.append(new_p)


	return new_path


def quaternion_multiply(q0, q1):
    """
    Multiplies two quaternions.
    https://docs.ros.org/en/rolling/Tutorials/Intermediate/Tf2/Quaternion-Fundamentals.html

    Input
    :param q0: A 4 element array containing the first quaternion (q01, q11, q21, q31)
    :param q1: A 4 element array containing the second quaternion (q02, q12, q22, q32)

    Output
    :return: A 4 element array containing the final quaternion (q03,q13,q23,q33)

    """
    # Extract the values from q0
    w0 = q0[0]
    x0 = q0[1]
    y0 = q0[2]
    z0 = q0[3]

    # Extract the values from q1
    w1 = q1[0]
    x1 = q1[1]
    y1 = q1[2]
    z1 = q1[3]

    # Computer the product of the two quaternions, term by term
    q0q1_w = w0 * w1 - x0 * x1 - y0 * y1 - z0 * z1
    q0q1_x = w0 * x1 + x0 * w1 + y0 * z1 - z0 * y1
    q0q1_y = w0 * y1 - x0 * z1 + y0 * w1 + z0 * x1
    q0q1_z = w0 * z1 + x0 * y1 - y0 * x1 + z0 * w1

    # Create a 4 element array containing the final quaternion
    final_quaternion = np.array([q0q1_w, q0q1_x, q0q1_y, q0q1_z])

    # Return a 4 element array containing the final quaternion (q02,q12,q22,q32)
    return final_quaternion

# generate_vanilla_straight_line_paths_for_testing(goal_a, [goal_b, goal_c, goal_d, goal_e, goal_f])
# generate_vanilla_straight_line_paths_for_testing(goal_b, [goal_a, goal_c, goal_d, goal_e, goal_f])

def setup_path_dict(path_title):
	all_paths = get_all_possible_path_names()
	# print(all_paths)
	# path_dict = {}
	# for name in all_paths:
	# 	path_dict[name] = None

	if path_title == 'null':
		path_dict = get_straight_line_paths()

	elif path_title == 'toptwo':
		path_dict = get_curvey_line_paths_1()

	elif path_title == 'bigger':
		path_dict = get_curvey_line_paths_1()

	elif path_title == 'early':
		path_dict = get_early_paths()

	elif path_title == 'late':
		path_dict = get_late_paths()

	elif path_title == 'even':
		path_dict = get_even_paths()
	
	elif path_title == 'obstacles_special':
		path_dict = get_obstacle_paths()

	elif path_title == 'obs':
		path_dict = get_obstacle_paths()
		return path_dict

	path_ab = path_dict['AB']
	path_ac = path_dict['AC']
	path_ad = path_dict['AD']
	path_ae = path_dict['AE']
	path_af = path_dict['AF']

	path_ba = path_dict['BA']
	path_bc = path_dict['BC']
	path_bd = path_dict['BD']
	path_be = path_dict['BE']
	path_bf = path_dict['BF']

	path_dict['CB'] = horizontal_flip(path_ab)
	path_dict['CA'] = horizontal_flip(path_ac)
	path_dict['EA'] = horizontal_flip(path_ae)
	path_dict['CD'] = horizontal_flip(path_af)
	path_dict['CE'] = horizontal_flip(path_ae)
	path_dict['CF'] = horizontal_flip(path_ad)

	path_dict['DA'] = vertical_flip(path_ad)
	path_dict['DB'] = vertical_flip(path_ae)
	path_dict['DC'] = vertical_flip(path_af)
	path_dict['DE'] = vertical_flip(path_ab)
	path_dict['DF'] = vertical_flip(path_ac)

	path_dict['EA'] = vertical_flip(path_bd)
	path_dict['EB'] = vertical_flip(path_be)
	path_dict['EC'] = vertical_flip(path_bf)
	path_dict['ED'] = vertical_flip(path_ba)
	path_dict['EF'] = vertical_flip(path_bc)

	path_dict['FA'] = horizontal_flip(vertical_flip(path_af))
	path_dict['FB'] = horizontal_flip(vertical_flip(path_ae))
	path_dict['FC'] = horizontal_flip(vertical_flip(path_ad))
	path_dict['FD'] = horizontal_flip(vertical_flip(path_ac))
	path_dict['FE'] = horizontal_flip(vertical_flip(path_ab))
	
	### VERIFY THAT ALL PATHS ARE COVERED
	todo = []
	for key in path_dict.keys():
		if path_dict[key] == None:
			todo.append(key)
	# print(todo)

	is_problem = False
	#### VERIFY ALL HAVE CORRECT START AND END
	for key in path_dict.keys():
		path = path_dict[key]

		start 	= state_dict[key[0]]
		end 	= state_dict[key[1]]

		if len(path) > 0:
			if path[0] != start:
				print("Broken in " + key + " bad start")
				is_problem = True

			if path[-1] != end:
				print("Broken in " + key + " bad end")
				is_problem = True
		else:
			print("No path yet for \n\t" + path_title + " -> " + key)

	if is_problem:
		print("Problem in path transformations")
	else:
		print("All paths added and checked for reasonableness!")

	return path_dict

def export_path_dict(export_name, path_dict):
	directory_name = "paths/"

	for key in path_dict.keys():
		path = path_dict[key]

		csv_content = ""
		# line format for ROS is 

		for i in range(1, len(path)):
			p0 = path[i - 1]
			p1 = path[i]

			prev_x, prev_y 	= p0[:2]
			curr_x, curr_y 	= p1[:2]
			prev_z, curr_z 	= 0, 	0

			q1_inv 	= [0, 0, 0, 0]
			q2 		= [0, 0, 0, 0]

			# Here's an example to get the relative rotation 
			# from the previous robot pose to the current robot pose: 
			# http://wiki.ros.org/tf2/Tutorials/Quaternions
			q1_inv[0] = prev_x
			q1_inv[1] = prev_y
			q1_inv[2] = 0 #prev_pose.pose.orientation.z
			q1_inv[3] = -1 #-prev_pose.pose.orientation.w # Negate for inverse

			q2[0] = curr_x
			q2[1] = curr_y
			q2[2] = 0 #current_pose.pose.orientation.z
			q2[3] = 1 #current_pose.pose.orientation.w
			
			qr = quaternion_multiply(q2, q1_inv)


			dX = curr_x - prev_x 
			dY = curr_y - prev_y
			dZ = 0 # since the robot doesn't float

			roll 	= 0
			yaw 	= np.arctan2(dY, dX)
			pitch 	= 0 #np.arctan2(np.sqrt(dZ * dZ + dX * dX), dY) + np.pi;

			# Create a rotation object from Euler angles specifying axes of rotation
			# (roll about an X-axis) / (subsequent pitch about the Y-axis) / (subsequent yaw about the Z-axis), 
			# rot = Rotation.from_euler('xyz', [0, 0, yaw], degrees=False)

			# # Convert to quaternions and print
			# rot_quat = rot.as_quat()

			x, y, z = prev_x, prev_y, 0
			qx = np.sin(roll/2) * np.cos(pitch/2) * np.cos(yaw/2) - np.cos(roll/2) * np.sin(pitch/2) * np.sin(yaw/2)
			qy = np.cos(roll/2) * np.sin(pitch/2) * np.cos(yaw/2) + np.sin(roll/2) * np.cos(pitch/2) * np.sin(yaw/2)
			qz = np.cos(roll/2) * np.cos(pitch/2) * np.sin(yaw/2) - np.sin(roll/2) * np.sin(pitch/2) * np.cos(yaw/2)
			qw = np.cos(roll/2) * np.cos(pitch/2) * np.cos(yaw/2) + np.sin(roll/2) * np.sin(pitch/2) * np.sin(yaw/2)
			# qx, qy, qz, qw = rot_quat

			csv_content += str(x) + ", " + str(y) + ", " + str(z) + ", " + str(qx) + ", " + str(qy) + ", " + str(qz) + ", " + str(qw) + "\n"

		x, y, z = curr_x, curr_y, 0
		csv_content += str(x) + ", " + str(y) + ", " + str(z) + ", " + str(qx) + ", " + str(qy) + ", " + str(qz) + ", " + str(qw) + "\n"

		filename = directory_name + key + "-" + export_name + ".csv"
		if export_name == 'obs':
			filename = directory_name + key + ".csv"

		f = open(filename, "w")
		f.write(csv_content)
		f.close()
		# print("wrote out " + filename)


path_dict = setup_path_dict("null")
export_path_dict('null', path_dict)


# generate_vanilla_straight_line_paths_for_testing(goal_a, [goal_b, goal_c, goal_d, goal_e, goal_f])

# path_dict = setup_path_dict('bigger')
# export_name = 'bigger'

# path_dict1 = setup_path_dict('null')
# path_dict2 = setup_path_dict('toptwo')

if False:
	export_path_dict(export_name, path_dict)
	print("All exported to paths/")


inspect_path_set()



